@prefix iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/> .
@prefix : <https://industryfusion.github.io/contexts/example/v0/base_shacl/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ngsild: <https://uri.etsi.org/ngsi-ld/> .
@prefix iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/> .
@prefix material: <https://industryfusion.github.io/contexts/ontology/v0/material/> .



:MachineShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Machine ;
    sh:property [
        sh:path iffBaseEntities:hasState ;
        sh:order 1 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:IRI;
            sh:class iffBaseKnowledge:MachineState;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
.

:CutterShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Cutter ;
    sh:property [
        sh:path iffBaseEntities:hasFilter ;
        sh:order 1 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasObject ;
            sh:nodeKind sh:IRI;
            sh:class iffBaseEntities:Filter;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasInWorkpiece ;
        sh:order 20 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasObject ;
            sh:nodeKind sh:IRI;
            sh:class iffBaseEntities:Workpiece;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasOutWorkpiece ;
        sh:order 30 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasObject ;
            sh:nodeKind sh:IRI;
            sh:class iffBaseEntities:Workpiece;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
.

:FilterShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Filter ;
    sh:property [
        sh:path iffBaseEntities:hasCartridge ;
        sh:order 1 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasObject ;
            sh:nodeKind sh:IRI;
            sh:class iffBaseEntities:FilterCartridge;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasStrength ;
        sh:order 10 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:maxInclusive 100.0 ;
            sh:minInclusive 0.0 ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
.

:CartridgeShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:FilterCartridge ;
    sh:property [
        sh:path iffBaseEntities:isUsedFrom ;
        sh:order 10 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:isUsedUntil ;
        sh:order 20 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
.

:WorkpieceShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Workpiece ;
    sh:property [
        sh:path iffBaseEntities:hasWidth ;
        sh:order 10 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:maxInclusive 100.0 ;
            sh:minInclusive 0.0 ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasHeight ;
        sh:order 20 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:maxInclusive 5.0 ;
            sh:minInclusive 0.0 ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasLength ;
        sh:order 30 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:Literal;
            sh:maxInclusive 200.0 ;
            sh:minInclusive 0.0 ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
    sh:property [
        sh:path iffBaseEntities:hasMaterial ;
        sh:order 40 ;
        sh:nodeKind sh:BlankNode;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:property [
            sh:path ngsild:hasValue ;
            sh:nodeKind sh:IRI;
            sh:class material:Material ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
        ] ;
    ] ;
.

:FilterStrengthShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Filter ;
    sh:sparql [
        a sh:SPARQLConstraints ;
        sh:message "Check Filter strength as function of workpiece: {?value}" ;
        sh:select """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <https://schema.org/>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>

SELECT ?this ?value
    where {
        $this iffBaseEntities:hasStrength [ ngsild:hasValue ?strength ] .
        ?pc a iffBaseEntities:Cutter .
        ?pc iffBaseEntities:hasFilter [ ngsild:hasObject $this ] .
        ?pc iffBaseEntities:hasInWorkpiece [ ngsild:hasObject ?wp ] .
        ?wp iffBaseEntities:hasHeight [ ngsild:hasValue ?height ] .
        ?pc iffBaseEntities:hasState [ ngsild:hasValue ?pcstate ] .
        $this iffBaseEntities:hasState [ ngsild:hasValue ?filterstate ] .
        BIND(
            IF(xsd:integer(?height) > 500 && xsd:float(?strength) < 1.0, \"Filter strength too low, should be 1.0\", 
                IF(xsd:integer(?height) > 250 && xsd:float(?strength) < 0.75, \"Filter strength too low, should be at least 0.75\",
                    IF(xsd:float(?strength) < 0.5, \"Filter strength too low, should be at least 0.5\", \"ok\")
                )
            ) as ?value) .
        FILTER(?pcstate = iffBaseKnowledge:state_PROCESSING && ?filterstate = iffBaseKnowledge:state_ON && ?value != \"ok\") .
    }
        """ ;
    ] .


:StateOnCutterShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Cutter ;
    sh:sparql [
        a sh:SPARQLConstraints;
        sh:severity iffBaseKnowledge:severityCritical ; 
        sh:message "Cutter running without running filter" ;
        sh:select """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>

SELECT $this ?v1 ?f ?v2
    where {
        $this iffBaseEntities:hasState [ ngsild:hasValue ?v1 ] .
        $this iffBaseEntities:hasFilter [ ngsild:hasObject ?f ] .
        ?f iffBaseEntities:hasState [ ngsild:hasValue ?v2 ] .
        FILTER(?v1 = iffBaseKnowledge:state_PROCESSING && ?v2 != iffBaseKnowledge:state_ON)
    }
        """ ;
    ] .


:StateOnFilterShape
    a sh:NodeShape ;
    sh:targetClass iffBaseEntities:Filter ;
    sh:sparql [
        a sh:SPARQLConstraints;
        sh:severity iffBaseKnowledge:severityWarning ;
        sh:message "Filter running without running assigned machine" ;
        sh:select """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>

SELECT $this ?v1 ?pc ?v2
    where {
        $this iffBaseEntities:hasState [ ngsild:hasValue ?v1 ] .
        ?pc rdf:type iffBaseEntities:Plasmacutter .
        ?pc iffBaseEntities:hasFilter [ ngsild:hasObject $this ] .
        ?pc  iffBaseEntities:hasState [ ngsild:hasValue ?v2 ] .
        FILTER(?v1 = iffBaseKnowledge:state_ON && ?v2 != iffBaseEntities:state_PROCESSING)
    }
        """ ;
    ] .

:StateValueShape a sh:NodeShape ;
 sh:targetClass iffBaseEntities:Machine ;
    sh:sparql [
        a sh:SPARQLConstraints; 
        sh:message "State value {?value} are not a valid machineState for machine {$this} of type {?type}" ;
        sh:select """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>

SELECT $this ?value ?type
        where {
             ?this a ?type .
             ?this  iffBaseEntities:hasState [ ngsild:hasValue ?value ] .
           FILTER NOT EXISTS{
                ?value iffBaseKnowledge:isValidFor ?subtype .
                ?type rdfs:subClassOf* ?subtype .
            }
        }
        """;
    ] .

:TimestampCartridgeFromRulesShape
	a sh:NodeShape ;
	sh:targetClass iffBaseEntities:FilterCartridge ;
	sh:rule [
		a sh:SPARQLRule ;
		sh:construct """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>
CONSTRUCT {
	$this iffBaseEntities:isUsedFrom [ ngsild:hasValue ?ts ] .
}
WHERE {
    ?filter iffBaseEntities:hasCartridge [ ngsild:hasObject $this ] .
    ?filter iffBaseEntities:hasState [ ngsild:observedAt ?fstateTs ] .
    ?filter iffBaseEntities:hasState [ ngsild:hasValue ?fstate ] .
    bind(?fstateTs as ?ts)
    FILTER NOT EXISTS {
		$this  iffBaseEntities:isUsedFrom [ ngsild:hasValue ?oldertimestamp ] .
	}
    FILTER(?fstate = iffBaseKnowledge:state_ON)
}
""" ;
	] ;
.

:TimestampCartridgeUntilRulesShape
	a sh:NodeShape ;
	sh:targetClass iffBaseEntities:FilterCartridge ;
	sh:rule [
		a sh:SPARQLRule ;
		sh:construct """
PREFIX iffBaseEntities: <https://industryfusion.github.io/contexts/example/v0/base_entities/>
PREFIX iffBaseKnowledge: <https://industryfusion.github.io/contexts/example/v0/base_knowledge/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ngsild: <https://uri.etsi.org/ngsi-ld/>
CONSTRUCT {
	$this iffBaseEntities:isUsedUntil [ ngsild:hasValue ?ts ] .
}
WHERE {
    ?filter iffBaseEntities:hasCartridge [ ngsild:hasObject $this ] .
    ?filter iffBaseEntities:hasState [ ngsild:hasValue ?fstate ] .
    ?filter iffBaseEntities:hasState [ ngsild:observedAt ?fstateTs ] .
    bind(?fstateTs as ?ts)
    FILTER(?fstate = iffBaseKnowledge:state_ON)
}
""" ;
	] ;
.